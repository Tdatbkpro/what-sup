  import 'package:cloud_firestore/cloud_firestore.dart';
  import 'package:firebase_auth/firebase_auth.dart' hide User;
  import 'package:flutter/material.dart';
  import 'package:intl/intl.dart';
  import 'package:get/get.dart';
  import 'package:google_sign_in/google_sign_in.dart';
  import 'package:whats_up/Model/User.dart';

  class Authcontroller extends GetxController {
    final auth = FirebaseAuth.instance;
    final db = FirebaseFirestore.instance;
    final RxBool isLoading = false.obs;
    final RxBool successSignIn = true.obs;

    String signInMessageError = '';
    String signUpMessageError = '';

    Future<void> signIn(String email, String password) async {
      isLoading.value = true;
      signInMessageError = '';
      try {
        UserCredential userCredential = await auth.signInWithEmailAndPassword(
          email: email,
          password: password,
        );
        final uid = userCredential.user?.uid;
        if (uid != null) {
          await db.collection("user").doc(uid).update({
            'lastOnlineStatus': DateTime.now().toIso8601String(),
            'status': 'online',
          });
        }

        successSignIn.value = true;
        showSuccessSnackbar('üéâ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!');
        Get.offAllNamed("/homePath");
      } on FirebaseAuthException catch (e) {
        successSignIn.value = false;
        switch (e.code) {
          case 'invalid-email':
            signInMessageError = '‚ùå Email kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng.';
            break;
          case 'user-disabled':
            signInMessageError = '‚ùå T√†i kho·∫£n ƒë√£ b·ªã v√¥ hi·ªáu h√≥a.';
            break;
          case 'user-not-found':
          case 'wrong-password':
          case 'invalid-credential':
            signInMessageError = '‚ùå Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c.';
            break;
          case 'too-many-requests':
            signInMessageError = '‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i qu√° nhi·ªÅu l·∫ßn. Vui l√≤ng th·ª≠ l·∫°i sau.';
            break;
          case 'operation-not-allowed':
            signInMessageError = '‚ùå Ph∆∞∆°ng th·ª©c ƒëƒÉng nh·∫≠p ch∆∞a ƒë∆∞·ª£c b·∫≠t.';
            break;
          case 'network-request-failed':
            signInMessageError = '‚ùå L·ªói k·∫øt n·ªëi m·∫°ng. Vui l√≤ng ki·ªÉm tra Internet.';
            break;
          case 'internal-error':
            signInMessageError = '‚ùå L·ªói h·ªá th·ªëng. Vui l√≤ng th·ª≠ l·∫°i.';
            break;
          case 'missing-email':
            signInMessageError = '‚ùå B·∫°n ch∆∞a nh·∫≠p email.';
            break;
          case 'missing-password':
            signInMessageError = '‚ùå B·∫°n ch∆∞a nh·∫≠p m·∫≠t kh·∫©u.';
            break;
          default:
            signInMessageError = '‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: ${e.message}';
        }
        showErrorSnackbar(signInMessageError);
      } catch (e) {
        signInMessageError = '‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: $e';
        showErrorSnackbar(signInMessageError);
      } finally {
        isLoading.value = false;
      }
    }

    Future<void> signUp(String email, String password, String name) async {
      isLoading.value = true;
      signUpMessageError = '';
      try {
        UserCredential userCredential = await auth.createUserWithEmailAndPassword(
          email: email,
          password: password,
        );
        final user = userCredential.user;
        if (user != null) {
          await initUser(email, name);
        }
        showSuccessSnackbar('üéâ ƒêƒÉng k√Ω t√†i kho·∫£n th√†nh c√¥ng!');
        Get.offAllNamed("/authPath");
      } on FirebaseAuthException catch (e) {
        switch (e.code) {
          case 'email-already-in-use':
            signUpMessageError = '‚ùå Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng.';
            break;
          case 'invalid-email':
            signUpMessageError = '‚ùå Email kh√¥ng h·ª£p l·ªá.';
            break;
          case 'operation-not-allowed':
            signUpMessageError = '‚ùå T√≠nh nƒÉng ƒëƒÉng k√Ω ƒëang b·ªã v√¥ hi·ªáu h√≥a.';
            break;
          case 'weak-password':
            signUpMessageError = '‚ùå M·∫≠t kh·∫©u qu√° y·∫øu.';
            break;
          case 'network-request-failed':
            signUpMessageError = '‚ùå L·ªói m·∫°ng. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi.';
            break;
          case 'internal-error':
            signUpMessageError = '‚ùå L·ªói h·ªá th·ªëng.';
            break;
          case 'missing-email':
            signUpMessageError = '‚ùå B·∫°n ch∆∞a nh·∫≠p email.';
            break;
          case 'missing-password':
            signUpMessageError = '‚ùå B·∫°n ch∆∞a nh·∫≠p m·∫≠t kh·∫©u.';
            break;
          default:
            signUpMessageError = '‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: ${e.message}';
        }
        showErrorSnackbar(signUpMessageError);
      } catch (e) {
        signUpMessageError = '‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: $e';
        showErrorSnackbar(signUpMessageError);
      } finally {
        isLoading.value = false;
      }
    }

    Future<void> signOut() async {
      try {
        final uid = auth.currentUser?.uid;
        if (uid != null) {
          await db.collection("user").doc(uid).update({
            'lastOnlineStatus': DateTime.now().toIso8601String(),
            'status': 'offline',
          });
        }

        await auth.signOut();
        showSuccessSnackbar('‚úÖ ƒêƒÉng xu·∫•t th√†nh c√¥ng!');
      } catch (e) {
        showErrorSnackbar('‚ùå ƒêƒÉng xu·∫•t th·∫•t b·∫°i: $e');
      }
      Get.offAllNamed('/welcomePath');
    }

    Future<void> initUser(String email, String name) async {
      try {
        final currentUser = auth.currentUser;
        if (currentUser == null) throw Exception('Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p');

        final uid = currentUser.uid;
        var newUser = User(
          id: uid,
          email: email,
          name: name,
          phoneNumber: currentUser.phoneNumber,
          profileImage: currentUser.photoURL,
          createdAt: DateTime.now(),
        );
        await db.collection("user").doc(uid).set(newUser.toJson());
      } catch (e) {
        print('‚ùå L·ªói khi t·∫°o user m·ªõi: $e');
      }
    }

    void showErrorSnackbar(String message) {
      Get.snackbar(
        'L·ªói',
        message,
        backgroundColor: Colors.redAccent.shade200,
        colorText: Colors.white,
        snackPosition: SnackPosition.TOP,
        duration: const Duration(seconds: 3),
        margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
        borderRadius: 14,
        isDismissible: true,
      );
    }

    void showSuccessSnackbar(String message) {
      Get.snackbar(
        'Th√†nh c√¥ng',
        message,
        backgroundColor: Colors.green.shade400,
        colorText: Colors.white,
        snackPosition: SnackPosition.TOP,
        duration: const Duration(seconds: 3),
        margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
        borderRadius: 14,
        isDismissible: true,
      );
    }

    String getUserStatusText(DateTime? lastOnline) {
      if (lastOnline == null) return "Kh√¥ng r√µ";
      final now = DateTime.now();
      final diff = now.difference(lastOnline);

      if (diff.inSeconds <= 60) return "ƒêang ho·∫°t ƒë·ªông";
      if (diff.inMinutes < 60) return "${diff.inMinutes} ph√∫t tr∆∞·ªõc";
      if (diff.inHours < 24) return "${diff.inHours} gi·ªù tr∆∞·ªõc";
      if (diff.inDays < 30) return "${diff.inDays} ng√†y tr∆∞·ªõc";
      return "${DateFormat('dd/MM/yyyy').format(lastOnline)}";
    }
    Future<void> signInWithGoogle() async {
  isLoading.value = true;
  try {
    final GoogleSignIn googleSignIn = GoogleSignIn(
      scopes: ['email', 'profile'],
    );

    final GoogleSignInAccount? googleUser = await googleSignIn.signIn();

    if (googleUser == null) {
      isLoading.value = false;
      return; // Ng∆∞·ªùi d√πng hu·ª∑ ƒëƒÉng nh·∫≠p
    }

    final GoogleSignInAuthentication googleAuth = await googleUser.authentication;

    final AuthCredential credential = GoogleAuthProvider.credential(
      accessToken: googleAuth.accessToken,
      idToken: googleAuth.idToken,
    );
    await googleSignIn.signOut();
    final UserCredential userCredential = await auth.signInWithCredential(credential);
    final user = userCredential.user;

    if (user != null) {
      final docSnapshot = await db.collection("user").doc(user.uid).get();

      if (!docSnapshot.exists) {
        final newUser = User(
          id: user.uid,
          email: user.email ?? '',
          name: user.displayName ?? '',
          phoneNumber: user.phoneNumber,
          profileImage: user.photoURL,
          createdAt: DateTime.now(),
        );
        await db.collection("user").doc(user.uid).set(newUser.toJson());
      }

      await db.collection("user").doc(user.uid).update({
        'lastOnlineStatus': DateTime.now().toIso8601String(),
        'status': 'online',
      });

      showSuccessSnackbar('üéâ ƒêƒÉng nh·∫≠p b·∫±ng Google th√†nh c√¥ng!');
      Get.offAllNamed("/homePath");
    }
  } on FirebaseAuthException catch (e) {
    showErrorSnackbar('‚ùå L·ªói x√°c th·ª±c Google: ${e.message}');
  } catch (e) {
    showErrorSnackbar('‚ùå ƒêƒÉng nh·∫≠p Google th·∫•t b·∫°i: $e');
  } finally {
    isLoading.value = false;
  }
}


  }
